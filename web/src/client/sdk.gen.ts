// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { SetDriveInfoApiV1ResdriveinfoPostData, SetDriveInfoApiV1ResdriveinfoPostError, SetDriveInfoApiV1ResdriveinfoPostResponse, GetDriveInfoApiV1ResdriveinfoGetData, GetDriveInfoApiV1ResdriveinfoGetError, GetDriveInfoApiV1ResdriveinfoGetResponse, AppendDriveInfoApiV1SubmissionPostData, AppendDriveInfoApiV1SubmissionPostError, AppendDriveInfoApiV1SubmissionPostResponse, GetDriveManifestApiV1ResdrivemanifestGetData, GetDriveManifestApiV1ResdrivemanifestGetError, GetDriveManifestApiV1ResdrivemanifestGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Set Drive Info
 * Submit initial RO-Crate metadata. NOTE: this may also need to accept the manifest data.
 */
export const setDriveInfoApiV1ResdriveinfoPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SetDriveInfoApiV1ResdriveinfoPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetDriveInfoApiV1ResdriveinfoPostResponse, SetDriveInfoApiV1ResdriveinfoPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/resdriveinfo'
    });
};

/**
 * Get Drive Info
 * Retrieve information about the specified Research Drive.
 */
export const getDriveInfoApiV1ResdriveinfoGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetDriveInfoApiV1ResdriveinfoGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDriveInfoApiV1ResdriveinfoGetResponse, GetDriveInfoApiV1ResdriveinfoGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/resdriveinfo'
    });
};

/**
 * Append Drive Info
 * Handle requests to create new form submission.
 */
export const appendDriveInfoApiV1SubmissionPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AppendDriveInfoApiV1SubmissionPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<AppendDriveInfoApiV1SubmissionPostResponse, AppendDriveInfoApiV1SubmissionPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/submission'
    });
};

/**
 * Get Drive Manifest
 * Retrieve a manifest from a research drive that has been loaded into the backend
 */
export const getDriveManifestApiV1ResdrivemanifestGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetDriveManifestApiV1ResdrivemanifestGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDriveManifestApiV1ResdrivemanifestGetResponse, GetDriveManifestApiV1ResdrivemanifestGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/resdrivemanifest'
    });
};